# @package _global_

# to execute this experiment run:
# python train.py experiment=example

defaults:
  - override /data: gaze_combined
  - override /model: gazenet
  - override /callbacks: default
  - override /trainer: gpu
  - override /logger: wandb
  - override /extras: default

# all parameters below will be merged with parameters from default configurations set above
# this allows you to overwrite only specified parameters

seed: 12345

trainer:
  min_epochs: 15
  max_epochs: 50
  gradient_clip_val: 1
  accumulate_grad_batches: 3
  # precision: 16 # speed up training by using 16-bit precision
  # # debug 
  # max_epochs: 7
  # overfit_batches: 3
  # limit_test_batches: 10
  
callbacks:
  model_checkpoint:
    monitor: "val/angular_gaze360video" # angular_gaze360 angular_gaze360video
    mode: "min"
    
  early_stopping: 
    monitor: "val/angular_gaze360video"
    patience: 10
    mode: "min"

extras: 
  bbox_scale_ratio: 0.1

model:
  solver:
    lr: 0.0001
    weight_decay: 0.0001
    layer_decay: null
    warmup_epochs: 5
    scheduler: "cosine"
    apply_linear_scaling: True
  
  net:
    _target_: gaze_module.models.components.gaze_models.GazeNet
    encoder: ${extras.omnivore} # resnet18, resnet50, swin_v2_t, inception_v3
    head:
      _target_: gaze_module.models.components.gaze_models.HeadCartesian
      _partial_: true
    activation:
      _target_: torch.nn.ReLU

  loss:
    #_target_: gaze_module.models.losses.CosineGazeLoss
    _target_: gaze_module.models.losses.AngularArcossLoss
    compute_only_2d: False

  mode_angular: cartesian

data:
  datasets_train:
    - ${extras.gaze360video}
    - ${extras.gaze360}
    # - ${extras.gfie}
    # - ${extras.gfievideo}
    #- ${extras.mpsgaze}
    # - ${extras.vat_video_pseudo_omni_360_360v}
    # - ${extras.vat_pseudo_omni_360_360v}
    # - ${extras.gazefollow_pseudo_omnivore_gfie_gfiev_mps}
    # - ${extras.gazefollow_pseudo_omnivore_gaze360}
    # - ${extras.gazefollow_pseudo_omnivore_gfie}
    # - ${extras.gazefollow_pseudo_omnivore_360_gfie_mps}
    # - ${extras.gazefollow_pseudo_omnivore_gfie_mps}  
    # - ${extras.gazefollow_pseudo_omnivore_360_360v}
    #- ${extras.gazefollow_pseudo_omnivore_360_360v_mps}

  datasets_test:
    - ${extras.gaze360}
    - ${extras.gaze360video}
    - ${extras.gfie}
    - ${extras.gfievideo}
    - ${extras.mpsgaze}
    - ${extras.eyediap}
    - ${extras.mpiiface}
    - ${extras.eyediap}
    - ${extras.eyediapvideo}
    # - ${extras.gazefollow_pseudo_omnivore_360_360v}
    # - ${extras.gazefollow_pseudo_omnivore_gfie_mps}
    # - ${extras.gazefollow_pseudo_omnivore_360_gfie_mps}
    # - ${extras.gazefollow_pseudo_omnivore_gfie}
    # - ${extras.gazefollow_pseudo_omnivore_gaze360}

  batch_size: 32 # Needs to be divisible by the number of devices (e.g., if in a distributed setup)
  num_workers: 10
  # batch_size: 120 # Needs to be divisible by the number of devices (e.g., if in a distributed setup)
  # num_workers: 10

  train_transform:
  
    _target_: gaze_module.data.components.transforms.Compose
    transforms:
      - _target_: gaze_module.data.components.transforms.BboxReshape
        square: True
        ratio: ${extras.bbox_scale_ratio}
      - _target_: gaze_module.data.components.transforms.ToImage
      - _target_: gaze_module.data.components.transforms.CropRandomResize
        output_size: ${model.net.encoder.head_size}
        scale: [0.9,1]
        ratio: [0.9,1.1]
      - _target_: gaze_module.data.components.transforms.HorizontalFlip
      - _target_: gaze_module.data.components.transforms.ColorJitter
        brightness: [0.5, 1.5]
        contrast: [0.5, 1.5]
        saturation: [0.2, 1.5]
        hue: null
        p: 0.5
      - _target_: gaze_module.data.components.transforms.RandomGaussianBlur
        radius: 5
        p: 0.5
      - _target_: gaze_module.data.components.transforms.ToTensor
      - _target_: gaze_module.data.components.transforms.Normalize
        mean: [0.485, 0.456, 0.406]
        std: [0.229, 0.224, 0.225]

tags: ["trained_gfie_mps_gf_gaze360",omnivore,data_augmentation]

logger:
  wandb:
    tags: ${tags}
    group: "run_ablation_headcrop_v2"
    name: "omnivore_360_360v"
  aim:
    experiment: "generalization ablation pseudo omnivore"
